//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Expense = newExpenseTable("public", "expense", "")

type expenseTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	AccountID   postgres.ColumnString
	CategoryID  postgres.ColumnString
	Title       postgres.ColumnString
	Description postgres.ColumnString
	Amount      postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExpenseTable struct {
	expenseTable

	EXCLUDED expenseTable
}

// AS creates new ExpenseTable with assigned alias
func (a ExpenseTable) AS(alias string) *ExpenseTable {
	return newExpenseTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExpenseTable with assigned schema name
func (a ExpenseTable) FromSchema(schemaName string) *ExpenseTable {
	return newExpenseTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExpenseTable with assigned table prefix
func (a ExpenseTable) WithPrefix(prefix string) *ExpenseTable {
	return newExpenseTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExpenseTable with assigned table suffix
func (a ExpenseTable) WithSuffix(suffix string) *ExpenseTable {
	return newExpenseTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExpenseTable(schemaName, tableName, alias string) *ExpenseTable {
	return &ExpenseTable{
		expenseTable: newExpenseTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newExpenseTableImpl("", "excluded", ""),
	}
}

func newExpenseTableImpl(schemaName, tableName, alias string) expenseTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		AccountIDColumn   = postgres.StringColumn("account_id")
		CategoryIDColumn  = postgres.StringColumn("category_id")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		AmountColumn      = postgres.IntegerColumn("amount")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, AccountIDColumn, CategoryIDColumn, TitleColumn, DescriptionColumn, AmountColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{AccountIDColumn, CategoryIDColumn, TitleColumn, DescriptionColumn, AmountColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return expenseTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		AccountID:   AccountIDColumn,
		CategoryID:  CategoryIDColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		Amount:      AmountColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
