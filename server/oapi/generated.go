// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package oapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GetExpensesParamsType.
const (
	Full   GetExpensesParamsType = "full"
	Recent GetExpensesParamsType = "recent"
)

// BaseCategoryDto Basic information of category
type BaseCategoryDto struct {
	// Id ID of category
	Id string `json:"id"`

	// Name Name of category
	Name string `json:"name"`
}

// FullCategoryDto Full information of a category
type FullCategoryDto struct {
	// Budget Budget of category
	Budget int `json:"budget"`

	// Current Current amount used within category budget
	Current int `json:"current"`

	// Id ID of category
	Id string `json:"id"`

	// Name Name of category
	Name string `json:"name"`
}

// FullExpenseDto Full information of an expense
type FullExpenseDto struct {
	Amount      int                `json:"amount"`
	CategoryId  openapi_types.UUID `json:"category_id"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Title       string             `json:"title"`
}

// ModifyCategoryDto DTO for creating or updating a category
type ModifyCategoryDto struct {
	// Budget Budget of the category
	Budget int `json:"budget"`

	// Name Name of the category
	Name string `json:"name"`
}

// ModifyExpenseDto DTO for creating or updating an expense
type ModifyExpenseDto struct {
	// Amount Amount spent on the expense
	Amount string `json:"amount"`

	// CategoryId ID of the category for the expense
	CategoryId string `json:"category_id"`

	// Description Description of the expense
	Description string `json:"description"`

	// Title Title of the expense
	Title string `json:"title"`
}

// MonthOverviewDto DTO for monthly breakdown
type MonthOverviewDto struct {
	// Amount total amount for the month
	Amount int `json:"amount"`

	// Month month of the breakdown
	Month int `json:"month"`
}

// CategoryID defines model for categoryID.
type CategoryID = openapi_types.UUID

// ExpenseID defines model for expenseID.
type ExpenseID = openapi_types.UUID

// GetExpensesParams defines parameters for GetExpenses.
type GetExpensesParams struct {
	// Type Full for getting entire list, Recent for last 20 transactions
	Type GetExpensesParamsType `form:"type" json:"type"`

	// Start Start date for querying transactions
	Start *openapi_types.Date `form:"start,omitempty" json:"start,omitempty"`

	// End End date for querying transactions
	End *openapi_types.Date `form:"end,omitempty" json:"end,omitempty"`
}

// GetExpensesParamsType defines parameters for GetExpenses.
type GetExpensesParamsType string

// PostCategoryJSONRequestBody defines body for PostCategory for application/json ContentType.
type PostCategoryJSONRequestBody = ModifyCategoryDto

// PatchCategoryJSONRequestBody defines body for PatchCategory for application/json ContentType.
type PatchCategoryJSONRequestBody = ModifyCategoryDto

// PostExpenseJSONRequestBody defines body for PostExpense for application/json ContentType.
type PostExpenseJSONRequestBody = ModifyExpenseDto

// PatchExpenseJSONRequestBody defines body for PatchExpense for application/json ContentType.
type PatchExpenseJSONRequestBody = ModifyCategoryDto

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCategories request
	GetCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCategoryWithBody request with any body
	PostCategoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCategory(ctx context.Context, body PostCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCategory request
	DeleteCategory(ctx context.Context, categoryID CategoryID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategory request
	GetCategory(ctx context.Context, categoryID CategoryID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchCategoryWithBody request with any body
	PatchCategoryWithBody(ctx context.Context, categoryID CategoryID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchCategory(ctx context.Context, categoryID CategoryID, body PatchCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExpenses request
	GetExpenses(ctx context.Context, params *GetExpensesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExpenseWithBody request with any body
	PostExpenseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExpense(ctx context.Context, body PostExpenseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExpensesOverview request
	GetExpensesOverview(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteExpense request
	DeleteExpense(ctx context.Context, expenseID ExpenseID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExpense request
	GetExpense(ctx context.Context, expenseID ExpenseID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchExpenseWithBody request with any body
	PatchExpenseWithBody(ctx context.Context, expenseID ExpenseID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchExpense(ctx context.Context, expenseID ExpenseID, body PatchExpenseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCategoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCategoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCategory(ctx context.Context, body PostCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCategoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCategory(ctx context.Context, categoryID CategoryID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCategoryRequest(c.Server, categoryID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategory(ctx context.Context, categoryID CategoryID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoryRequest(c.Server, categoryID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCategoryWithBody(ctx context.Context, categoryID CategoryID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCategoryRequestWithBody(c.Server, categoryID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchCategory(ctx context.Context, categoryID CategoryID, body PatchCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchCategoryRequest(c.Server, categoryID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpenses(ctx context.Context, params *GetExpensesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExpensesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExpenseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExpenseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExpense(ctx context.Context, body PostExpenseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExpenseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpensesOverview(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExpensesOverviewRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteExpense(ctx context.Context, expenseID ExpenseID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteExpenseRequest(c.Server, expenseID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpense(ctx context.Context, expenseID ExpenseID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExpenseRequest(c.Server, expenseID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchExpenseWithBody(ctx context.Context, expenseID ExpenseID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchExpenseRequestWithBody(c.Server, expenseID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchExpense(ctx context.Context, expenseID ExpenseID, body PatchExpenseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchExpenseRequest(c.Server, expenseID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCategoriesRequest generates requests for GetCategories
func NewGetCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCategoryRequest calls the generic PostCategory builder with application/json body
func NewPostCategoryRequest(server string, body PostCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCategoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCategoryRequestWithBody generates requests for PostCategory with any type of body
func NewPostCategoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCategoryRequest generates requests for DeleteCategory
func NewDeleteCategoryRequest(server string, categoryID CategoryID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryID", runtime.ParamLocationPath, categoryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCategoryRequest generates requests for GetCategory
func NewGetCategoryRequest(server string, categoryID CategoryID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryID", runtime.ParamLocationPath, categoryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchCategoryRequest calls the generic PatchCategory builder with application/json body
func NewPatchCategoryRequest(server string, categoryID CategoryID, body PatchCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchCategoryRequestWithBody(server, categoryID, "application/json", bodyReader)
}

// NewPatchCategoryRequestWithBody generates requests for PatchCategory with any type of body
func NewPatchCategoryRequestWithBody(server string, categoryID CategoryID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryID", runtime.ParamLocationPath, categoryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExpensesRequest generates requests for GetExpenses
func NewGetExpensesRequest(server string, params *GetExpensesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/expenses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostExpenseRequest calls the generic PostExpense builder with application/json body
func NewPostExpenseRequest(server string, body PostExpenseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExpenseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostExpenseRequestWithBody generates requests for PostExpense with any type of body
func NewPostExpenseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/expenses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExpensesOverviewRequest generates requests for GetExpensesOverview
func NewGetExpensesOverviewRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/expenses/overview")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteExpenseRequest generates requests for DeleteExpense
func NewDeleteExpenseRequest(server string, expenseID ExpenseID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expenseID", runtime.ParamLocationPath, expenseID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/expenses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExpenseRequest generates requests for GetExpense
func NewGetExpenseRequest(server string, expenseID ExpenseID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expenseID", runtime.ParamLocationPath, expenseID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/expenses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchExpenseRequest calls the generic PatchExpense builder with application/json body
func NewPatchExpenseRequest(server string, expenseID ExpenseID, body PatchExpenseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchExpenseRequestWithBody(server, expenseID, "application/json", bodyReader)
}

// NewPatchExpenseRequestWithBody generates requests for PatchExpense with any type of body
func NewPatchExpenseRequestWithBody(server string, expenseID ExpenseID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expenseID", runtime.ParamLocationPath, expenseID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/expenses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCategoriesWithResponse request
	GetCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error)

	// PostCategoryWithBodyWithResponse request with any body
	PostCategoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCategoryResponse, error)

	PostCategoryWithResponse(ctx context.Context, body PostCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCategoryResponse, error)

	// DeleteCategoryWithResponse request
	DeleteCategoryWithResponse(ctx context.Context, categoryID CategoryID, reqEditors ...RequestEditorFn) (*DeleteCategoryResponse, error)

	// GetCategoryWithResponse request
	GetCategoryWithResponse(ctx context.Context, categoryID CategoryID, reqEditors ...RequestEditorFn) (*GetCategoryResponse, error)

	// PatchCategoryWithBodyWithResponse request with any body
	PatchCategoryWithBodyWithResponse(ctx context.Context, categoryID CategoryID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCategoryResponse, error)

	PatchCategoryWithResponse(ctx context.Context, categoryID CategoryID, body PatchCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCategoryResponse, error)

	// GetExpensesWithResponse request
	GetExpensesWithResponse(ctx context.Context, params *GetExpensesParams, reqEditors ...RequestEditorFn) (*GetExpensesResponse, error)

	// PostExpenseWithBodyWithResponse request with any body
	PostExpenseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExpenseResponse, error)

	PostExpenseWithResponse(ctx context.Context, body PostExpenseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExpenseResponse, error)

	// GetExpensesOverviewWithResponse request
	GetExpensesOverviewWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetExpensesOverviewResponse, error)

	// DeleteExpenseWithResponse request
	DeleteExpenseWithResponse(ctx context.Context, expenseID ExpenseID, reqEditors ...RequestEditorFn) (*DeleteExpenseResponse, error)

	// GetExpenseWithResponse request
	GetExpenseWithResponse(ctx context.Context, expenseID ExpenseID, reqEditors ...RequestEditorFn) (*GetExpenseResponse, error)

	// PatchExpenseWithBodyWithResponse request with any body
	PatchExpenseWithBodyWithResponse(ctx context.Context, expenseID ExpenseID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchExpenseResponse, error)

	PatchExpenseWithResponse(ctx context.Context, expenseID ExpenseID, body PatchExpenseJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchExpenseResponse, error)
}

type GetCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Categories An array of categories, null if empty
		Categories *[]BaseCategoryDto `json:"categories,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullCategoryDto
}

// Status returns HTTPResponse.Status
func (r GetCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExpensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Expenses List of expenses, null if empty
		Expenses *[]FullExpenseDto `json:"expenses,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetExpensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExpensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExpenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostExpenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExpenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExpensesOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Overview *[]MonthOverviewDto `json:"overview,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetExpensesOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExpensesOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteExpenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteExpenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteExpenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExpenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullExpenseDto
}

// Status returns HTTPResponse.Status
func (r GetExpenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExpenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchExpenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchExpenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchExpenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCategoriesWithResponse request returning *GetCategoriesResponse
func (c *ClientWithResponses) GetCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error) {
	rsp, err := c.GetCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoriesResponse(rsp)
}

// PostCategoryWithBodyWithResponse request with arbitrary body returning *PostCategoryResponse
func (c *ClientWithResponses) PostCategoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCategoryResponse, error) {
	rsp, err := c.PostCategoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCategoryResponse(rsp)
}

func (c *ClientWithResponses) PostCategoryWithResponse(ctx context.Context, body PostCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCategoryResponse, error) {
	rsp, err := c.PostCategory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCategoryResponse(rsp)
}

// DeleteCategoryWithResponse request returning *DeleteCategoryResponse
func (c *ClientWithResponses) DeleteCategoryWithResponse(ctx context.Context, categoryID CategoryID, reqEditors ...RequestEditorFn) (*DeleteCategoryResponse, error) {
	rsp, err := c.DeleteCategory(ctx, categoryID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCategoryResponse(rsp)
}

// GetCategoryWithResponse request returning *GetCategoryResponse
func (c *ClientWithResponses) GetCategoryWithResponse(ctx context.Context, categoryID CategoryID, reqEditors ...RequestEditorFn) (*GetCategoryResponse, error) {
	rsp, err := c.GetCategory(ctx, categoryID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoryResponse(rsp)
}

// PatchCategoryWithBodyWithResponse request with arbitrary body returning *PatchCategoryResponse
func (c *ClientWithResponses) PatchCategoryWithBodyWithResponse(ctx context.Context, categoryID CategoryID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchCategoryResponse, error) {
	rsp, err := c.PatchCategoryWithBody(ctx, categoryID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCategoryResponse(rsp)
}

func (c *ClientWithResponses) PatchCategoryWithResponse(ctx context.Context, categoryID CategoryID, body PatchCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchCategoryResponse, error) {
	rsp, err := c.PatchCategory(ctx, categoryID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchCategoryResponse(rsp)
}

// GetExpensesWithResponse request returning *GetExpensesResponse
func (c *ClientWithResponses) GetExpensesWithResponse(ctx context.Context, params *GetExpensesParams, reqEditors ...RequestEditorFn) (*GetExpensesResponse, error) {
	rsp, err := c.GetExpenses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExpensesResponse(rsp)
}

// PostExpenseWithBodyWithResponse request with arbitrary body returning *PostExpenseResponse
func (c *ClientWithResponses) PostExpenseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExpenseResponse, error) {
	rsp, err := c.PostExpenseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExpenseResponse(rsp)
}

func (c *ClientWithResponses) PostExpenseWithResponse(ctx context.Context, body PostExpenseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExpenseResponse, error) {
	rsp, err := c.PostExpense(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExpenseResponse(rsp)
}

// GetExpensesOverviewWithResponse request returning *GetExpensesOverviewResponse
func (c *ClientWithResponses) GetExpensesOverviewWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetExpensesOverviewResponse, error) {
	rsp, err := c.GetExpensesOverview(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExpensesOverviewResponse(rsp)
}

// DeleteExpenseWithResponse request returning *DeleteExpenseResponse
func (c *ClientWithResponses) DeleteExpenseWithResponse(ctx context.Context, expenseID ExpenseID, reqEditors ...RequestEditorFn) (*DeleteExpenseResponse, error) {
	rsp, err := c.DeleteExpense(ctx, expenseID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteExpenseResponse(rsp)
}

// GetExpenseWithResponse request returning *GetExpenseResponse
func (c *ClientWithResponses) GetExpenseWithResponse(ctx context.Context, expenseID ExpenseID, reqEditors ...RequestEditorFn) (*GetExpenseResponse, error) {
	rsp, err := c.GetExpense(ctx, expenseID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExpenseResponse(rsp)
}

// PatchExpenseWithBodyWithResponse request with arbitrary body returning *PatchExpenseResponse
func (c *ClientWithResponses) PatchExpenseWithBodyWithResponse(ctx context.Context, expenseID ExpenseID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchExpenseResponse, error) {
	rsp, err := c.PatchExpenseWithBody(ctx, expenseID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchExpenseResponse(rsp)
}

func (c *ClientWithResponses) PatchExpenseWithResponse(ctx context.Context, expenseID ExpenseID, body PatchExpenseJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchExpenseResponse, error) {
	rsp, err := c.PatchExpense(ctx, expenseID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchExpenseResponse(rsp)
}

// ParseGetCategoriesResponse parses an HTTP response from a GetCategoriesWithResponse call
func ParseGetCategoriesResponse(rsp *http.Response) (*GetCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Categories An array of categories, null if empty
			Categories *[]BaseCategoryDto `json:"categories,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCategoryResponse parses an HTTP response from a PostCategoryWithResponse call
func ParsePostCategoryResponse(rsp *http.Response) (*PostCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCategoryResponse parses an HTTP response from a DeleteCategoryWithResponse call
func ParseDeleteCategoryResponse(rsp *http.Response) (*DeleteCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCategoryResponse parses an HTTP response from a GetCategoryWithResponse call
func ParseGetCategoryResponse(rsp *http.Response) (*GetCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullCategoryDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchCategoryResponse parses an HTTP response from a PatchCategoryWithResponse call
func ParsePatchCategoryResponse(rsp *http.Response) (*PatchCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetExpensesResponse parses an HTTP response from a GetExpensesWithResponse call
func ParseGetExpensesResponse(rsp *http.Response) (*GetExpensesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExpensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Expenses List of expenses, null if empty
			Expenses *[]FullExpenseDto `json:"expenses,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostExpenseResponse parses an HTTP response from a PostExpenseWithResponse call
func ParsePostExpenseResponse(rsp *http.Response) (*PostExpenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExpenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetExpensesOverviewResponse parses an HTTP response from a GetExpensesOverviewWithResponse call
func ParseGetExpensesOverviewResponse(rsp *http.Response) (*GetExpensesOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExpensesOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Overview *[]MonthOverviewDto `json:"overview,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteExpenseResponse parses an HTTP response from a DeleteExpenseWithResponse call
func ParseDeleteExpenseResponse(rsp *http.Response) (*DeleteExpenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteExpenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetExpenseResponse parses an HTTP response from a GetExpenseWithResponse call
func ParseGetExpenseResponse(rsp *http.Response) (*GetExpenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExpenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullExpenseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchExpenseResponse parses an HTTP response from a PatchExpenseWithResponse call
func ParsePatchExpenseResponse(rsp *http.Response) (*PatchExpenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchExpenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get List
	// (GET /categories)
	GetCategories(w http.ResponseWriter, r *http.Request)
	// Create
	// (POST /categories)
	PostCategory(w http.ResponseWriter, r *http.Request)
	// Delete
	// (DELETE /categories/{categoryID})
	DeleteCategory(w http.ResponseWriter, r *http.Request, categoryID CategoryID)
	// Get
	// (GET /categories/{categoryID})
	GetCategory(w http.ResponseWriter, r *http.Request, categoryID CategoryID)
	// Update
	// (PATCH /categories/{categoryID})
	PatchCategory(w http.ResponseWriter, r *http.Request, categoryID CategoryID)
	// Get List
	// (GET /expenses)
	GetExpenses(w http.ResponseWriter, r *http.Request, params GetExpensesParams)
	// Create
	// (POST /expenses)
	PostExpense(w http.ResponseWriter, r *http.Request)
	// Get
	// (GET /expenses/overview)
	GetExpensesOverview(w http.ResponseWriter, r *http.Request)

	// (DELETE /expenses/{expenseID})
	DeleteExpense(w http.ResponseWriter, r *http.Request, expenseID ExpenseID)
	// Get
	// (GET /expenses/{expenseID})
	GetExpense(w http.ResponseWriter, r *http.Request, expenseID ExpenseID)
	// Update
	// (PATCH /expenses/{expenseID})
	PatchExpense(w http.ResponseWriter, r *http.Request, expenseID ExpenseID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get List
// (GET /categories)
func (_ Unimplemented) GetCategories(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create
// (POST /categories)
func (_ Unimplemented) PostCategory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete
// (DELETE /categories/{categoryID})
func (_ Unimplemented) DeleteCategory(w http.ResponseWriter, r *http.Request, categoryID CategoryID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get
// (GET /categories/{categoryID})
func (_ Unimplemented) GetCategory(w http.ResponseWriter, r *http.Request, categoryID CategoryID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update
// (PATCH /categories/{categoryID})
func (_ Unimplemented) PatchCategory(w http.ResponseWriter, r *http.Request, categoryID CategoryID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get List
// (GET /expenses)
func (_ Unimplemented) GetExpenses(w http.ResponseWriter, r *http.Request, params GetExpensesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create
// (POST /expenses)
func (_ Unimplemented) PostExpense(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get
// (GET /expenses/overview)
func (_ Unimplemented) GetExpensesOverview(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /expenses/{expenseID})
func (_ Unimplemented) DeleteExpense(w http.ResponseWriter, r *http.Request, expenseID ExpenseID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get
// (GET /expenses/{expenseID})
func (_ Unimplemented) GetExpense(w http.ResponseWriter, r *http.Request, expenseID ExpenseID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update
// (PATCH /expenses/{expenseID})
func (_ Unimplemented) PatchExpense(w http.ResponseWriter, r *http.Request, expenseID ExpenseID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCategories operation middleware
func (siw *ServerInterfaceWrapper) GetCategories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCategories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCategory operation middleware
func (siw *ServerInterfaceWrapper) PostCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCategory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCategory operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "categoryID" -------------
	var categoryID CategoryID

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryID", runtime.ParamLocationPath, chi.URLParam(r, "categoryID"), &categoryID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCategory(w, r, categoryID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCategory operation middleware
func (siw *ServerInterfaceWrapper) GetCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "categoryID" -------------
	var categoryID CategoryID

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryID", runtime.ParamLocationPath, chi.URLParam(r, "categoryID"), &categoryID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCategory(w, r, categoryID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchCategory operation middleware
func (siw *ServerInterfaceWrapper) PatchCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "categoryID" -------------
	var categoryID CategoryID

	err = runtime.BindStyledParameterWithLocation("simple", false, "categoryID", runtime.ParamLocationPath, chi.URLParam(r, "categoryID"), &categoryID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchCategory(w, r, categoryID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetExpenses operation middleware
func (siw *ServerInterfaceWrapper) GetExpenses(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetExpensesParams

	// ------------- Required query parameter "type" -------------

	if paramValue := r.URL.Query().Get("type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", r.URL.Query(), &params.End)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExpenses(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostExpense operation middleware
func (siw *ServerInterfaceWrapper) PostExpense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostExpense(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetExpensesOverview operation middleware
func (siw *ServerInterfaceWrapper) GetExpensesOverview(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExpensesOverview(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteExpense operation middleware
func (siw *ServerInterfaceWrapper) DeleteExpense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "expenseID" -------------
	var expenseID ExpenseID

	err = runtime.BindStyledParameterWithLocation("simple", false, "expenseID", runtime.ParamLocationPath, chi.URLParam(r, "expenseID"), &expenseID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expenseID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteExpense(w, r, expenseID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetExpense operation middleware
func (siw *ServerInterfaceWrapper) GetExpense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "expenseID" -------------
	var expenseID ExpenseID

	err = runtime.BindStyledParameterWithLocation("simple", false, "expenseID", runtime.ParamLocationPath, chi.URLParam(r, "expenseID"), &expenseID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expenseID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExpense(w, r, expenseID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchExpense operation middleware
func (siw *ServerInterfaceWrapper) PatchExpense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "expenseID" -------------
	var expenseID ExpenseID

	err = runtime.BindStyledParameterWithLocation("simple", false, "expenseID", runtime.ParamLocationPath, chi.URLParam(r, "expenseID"), &expenseID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expenseID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchExpense(w, r, expenseID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/categories", wrapper.GetCategories)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/categories", wrapper.PostCategory)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/categories/{categoryID}", wrapper.DeleteCategory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/categories/{categoryID}", wrapper.GetCategory)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/categories/{categoryID}", wrapper.PatchCategory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/expenses", wrapper.GetExpenses)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/expenses", wrapper.PostExpense)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/expenses/overview", wrapper.GetExpensesOverview)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/expenses/{expenseID}", wrapper.DeleteExpense)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/expenses/{expenseID}", wrapper.GetExpense)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/expenses/{expenseID}", wrapper.PatchExpense)
	})

	return r
}

type GetCategoriesRequestObject struct {
}

type GetCategoriesResponseObject interface {
	VisitGetCategoriesResponse(w http.ResponseWriter) error
}

type GetCategories200JSONResponse struct {
	// Categories An array of categories, null if empty
	Categories *[]BaseCategoryDto `json:"categories,omitempty"`
}

func (response GetCategories200JSONResponse) VisitGetCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCategoryRequestObject struct {
	Body *PostCategoryJSONRequestBody
}

type PostCategoryResponseObject interface {
	VisitPostCategoryResponse(w http.ResponseWriter) error
}

type PostCategory201Response struct {
}

func (response PostCategory201Response) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type DeleteCategoryRequestObject struct {
	CategoryID CategoryID `json:"categoryID"`
}

type DeleteCategoryResponseObject interface {
	VisitDeleteCategoryResponse(w http.ResponseWriter) error
}

type DeleteCategory200Response struct {
}

func (response DeleteCategory200Response) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteCategory404Response struct {
}

func (response DeleteCategory404Response) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetCategoryRequestObject struct {
	CategoryID CategoryID `json:"categoryID"`
}

type GetCategoryResponseObject interface {
	VisitGetCategoryResponse(w http.ResponseWriter) error
}

type GetCategory200JSONResponse FullCategoryDto

func (response GetCategory200JSONResponse) VisitGetCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategory404Response struct {
}

func (response GetCategory404Response) VisitGetCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchCategoryRequestObject struct {
	CategoryID CategoryID `json:"categoryID"`
	Body       *PatchCategoryJSONRequestBody
}

type PatchCategoryResponseObject interface {
	VisitPatchCategoryResponse(w http.ResponseWriter) error
}

type PatchCategory200Response struct {
}

func (response PatchCategory200Response) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchCategory404Response struct {
}

func (response PatchCategory404Response) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetExpensesRequestObject struct {
	Params GetExpensesParams
}

type GetExpensesResponseObject interface {
	VisitGetExpensesResponse(w http.ResponseWriter) error
}

type GetExpenses200JSONResponse struct {
	// Expenses List of expenses, null if empty
	Expenses *[]FullExpenseDto `json:"expenses,omitempty"`
}

func (response GetExpenses200JSONResponse) VisitGetExpensesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostExpenseRequestObject struct {
	Body *PostExpenseJSONRequestBody
}

type PostExpenseResponseObject interface {
	VisitPostExpenseResponse(w http.ResponseWriter) error
}

type PostExpense201Response struct {
}

func (response PostExpense201Response) VisitPostExpenseResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type GetExpensesOverviewRequestObject struct {
}

type GetExpensesOverviewResponseObject interface {
	VisitGetExpensesOverviewResponse(w http.ResponseWriter) error
}

type GetExpensesOverview200JSONResponse struct {
	Overview *[]MonthOverviewDto `json:"overview,omitempty"`
}

func (response GetExpensesOverview200JSONResponse) VisitGetExpensesOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteExpenseRequestObject struct {
	ExpenseID ExpenseID `json:"expenseID"`
}

type DeleteExpenseResponseObject interface {
	VisitDeleteExpenseResponse(w http.ResponseWriter) error
}

type DeleteExpense200Response struct {
}

func (response DeleteExpense200Response) VisitDeleteExpenseResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteExpense404Response struct {
}

func (response DeleteExpense404Response) VisitDeleteExpenseResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetExpenseRequestObject struct {
	ExpenseID ExpenseID `json:"expenseID"`
}

type GetExpenseResponseObject interface {
	VisitGetExpenseResponse(w http.ResponseWriter) error
}

type GetExpense200JSONResponse FullExpenseDto

func (response GetExpense200JSONResponse) VisitGetExpenseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetExpense404Response struct {
}

func (response GetExpense404Response) VisitGetExpenseResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchExpenseRequestObject struct {
	ExpenseID ExpenseID `json:"expenseID"`
	Body      *PatchExpenseJSONRequestBody
}

type PatchExpenseResponseObject interface {
	VisitPatchExpenseResponse(w http.ResponseWriter) error
}

type PatchExpense200Response struct {
}

func (response PatchExpense200Response) VisitPatchExpenseResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchExpense404Response struct {
}

func (response PatchExpense404Response) VisitPatchExpenseResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get List
	// (GET /categories)
	GetCategories(ctx context.Context, request GetCategoriesRequestObject) (GetCategoriesResponseObject, error)
	// Create
	// (POST /categories)
	PostCategory(ctx context.Context, request PostCategoryRequestObject) (PostCategoryResponseObject, error)
	// Delete
	// (DELETE /categories/{categoryID})
	DeleteCategory(ctx context.Context, request DeleteCategoryRequestObject) (DeleteCategoryResponseObject, error)
	// Get
	// (GET /categories/{categoryID})
	GetCategory(ctx context.Context, request GetCategoryRequestObject) (GetCategoryResponseObject, error)
	// Update
	// (PATCH /categories/{categoryID})
	PatchCategory(ctx context.Context, request PatchCategoryRequestObject) (PatchCategoryResponseObject, error)
	// Get List
	// (GET /expenses)
	GetExpenses(ctx context.Context, request GetExpensesRequestObject) (GetExpensesResponseObject, error)
	// Create
	// (POST /expenses)
	PostExpense(ctx context.Context, request PostExpenseRequestObject) (PostExpenseResponseObject, error)
	// Get
	// (GET /expenses/overview)
	GetExpensesOverview(ctx context.Context, request GetExpensesOverviewRequestObject) (GetExpensesOverviewResponseObject, error)

	// (DELETE /expenses/{expenseID})
	DeleteExpense(ctx context.Context, request DeleteExpenseRequestObject) (DeleteExpenseResponseObject, error)
	// Get
	// (GET /expenses/{expenseID})
	GetExpense(ctx context.Context, request GetExpenseRequestObject) (GetExpenseResponseObject, error)
	// Update
	// (PATCH /expenses/{expenseID})
	PatchExpense(ctx context.Context, request PatchExpenseRequestObject) (PatchExpenseResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetCategories operation middleware
func (sh *strictHandler) GetCategories(w http.ResponseWriter, r *http.Request) {
	var request GetCategoriesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategories(ctx, request.(GetCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCategoriesResponseObject); ok {
		if err := validResponse.VisitGetCategoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostCategory operation middleware
func (sh *strictHandler) PostCategory(w http.ResponseWriter, r *http.Request) {
	var request PostCategoryRequestObject

	var body PostCategoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostCategory(ctx, request.(PostCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostCategoryResponseObject); ok {
		if err := validResponse.VisitPostCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCategory operation middleware
func (sh *strictHandler) DeleteCategory(w http.ResponseWriter, r *http.Request, categoryID CategoryID) {
	var request DeleteCategoryRequestObject

	request.CategoryID = categoryID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCategory(ctx, request.(DeleteCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteCategoryResponseObject); ok {
		if err := validResponse.VisitDeleteCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCategory operation middleware
func (sh *strictHandler) GetCategory(w http.ResponseWriter, r *http.Request, categoryID CategoryID) {
	var request GetCategoryRequestObject

	request.CategoryID = categoryID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategory(ctx, request.(GetCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCategoryResponseObject); ok {
		if err := validResponse.VisitGetCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchCategory operation middleware
func (sh *strictHandler) PatchCategory(w http.ResponseWriter, r *http.Request, categoryID CategoryID) {
	var request PatchCategoryRequestObject

	request.CategoryID = categoryID

	var body PatchCategoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchCategory(ctx, request.(PatchCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchCategoryResponseObject); ok {
		if err := validResponse.VisitPatchCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetExpenses operation middleware
func (sh *strictHandler) GetExpenses(w http.ResponseWriter, r *http.Request, params GetExpensesParams) {
	var request GetExpensesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetExpenses(ctx, request.(GetExpensesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExpenses")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetExpensesResponseObject); ok {
		if err := validResponse.VisitGetExpensesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostExpense operation middleware
func (sh *strictHandler) PostExpense(w http.ResponseWriter, r *http.Request) {
	var request PostExpenseRequestObject

	var body PostExpenseJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostExpense(ctx, request.(PostExpenseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostExpense")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostExpenseResponseObject); ok {
		if err := validResponse.VisitPostExpenseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetExpensesOverview operation middleware
func (sh *strictHandler) GetExpensesOverview(w http.ResponseWriter, r *http.Request) {
	var request GetExpensesOverviewRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetExpensesOverview(ctx, request.(GetExpensesOverviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExpensesOverview")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetExpensesOverviewResponseObject); ok {
		if err := validResponse.VisitGetExpensesOverviewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteExpense operation middleware
func (sh *strictHandler) DeleteExpense(w http.ResponseWriter, r *http.Request, expenseID ExpenseID) {
	var request DeleteExpenseRequestObject

	request.ExpenseID = expenseID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteExpense(ctx, request.(DeleteExpenseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteExpense")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteExpenseResponseObject); ok {
		if err := validResponse.VisitDeleteExpenseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetExpense operation middleware
func (sh *strictHandler) GetExpense(w http.ResponseWriter, r *http.Request, expenseID ExpenseID) {
	var request GetExpenseRequestObject

	request.ExpenseID = expenseID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetExpense(ctx, request.(GetExpenseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExpense")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetExpenseResponseObject); ok {
		if err := validResponse.VisitGetExpenseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchExpense operation middleware
func (sh *strictHandler) PatchExpense(w http.ResponseWriter, r *http.Request, expenseID ExpenseID) {
	var request PatchExpenseRequestObject

	request.ExpenseID = expenseID

	var body PatchExpenseJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchExpense(ctx, request.(PatchExpenseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchExpense")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchExpenseResponseObject); ok {
		if err := validResponse.VisitPatchExpenseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
