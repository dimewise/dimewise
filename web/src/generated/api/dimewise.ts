/**
 * Generated by orval v6.19.1 🍺
 * Do not edit manually.
 * dimewise
 * Backend API for dimewise application
 * OpenAPI spec version: 1.0
 */
import useSwr from "swr";
import type { Key, SWRConfiguration } from "swr";
import type {
  FullCategoryDto,
  FullExpenseDto,
  GetCategories200,
  GetExpenses200,
  GetExpensesOverview200,
  GetExpensesParams,
  ModifyCategoryDto,
  ModifyExpenseDto,
} from "../dto";
import { DimewiseCustomFetcher } from "../../api/custom-fetch";

/**
 * Get a list of categories
 * @summary Get List
 */
export const getCategories = () => {
  return DimewiseCustomFetcher<GetCategories200>({
    url: `/categories`,
    method: "get",
  });
};

export const getGetCategoriesKey = () => [`/categories`] as const;

export type GetCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategories>>
>;
export type GetCategoriesQueryError = unknown;

/**
 * @summary Get List
 */
export const useGetCategories = <TError = unknown>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getCategories>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetCategoriesKey() : null));
  const swrFn = () => getCategories();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Create a category based on form submission
 * @summary Create
 */
export const postCategory = (modifyCategoryDto: ModifyCategoryDto) => {
  return DimewiseCustomFetcher<void>({
    url: `/categories`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: modifyCategoryDto,
  });
};

/**
 * Get information about a category
 * @summary Get
 */
export const getCategory = (categoryID: string) => {
  return DimewiseCustomFetcher<FullCategoryDto>({
    url: `/categories/${categoryID}`,
    method: "get",
  });
};

export const getGetCategoryKey = (categoryID: string) =>
  [`/categories/${categoryID}`] as const;

export type GetCategoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategory>>
>;
export type GetCategoryQueryError = void;

/**
 * @summary Get
 */
export const useGetCategory = <TError = void>(
  categoryID: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getCategory>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!categoryID;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetCategoryKey(categoryID) : null));
  const swrFn = () => getCategory(categoryID);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Updates existing category through form submission
 * @summary Update
 */
export const patchCategory = (
  categoryID: string,
  modifyCategoryDto: ModifyCategoryDto
) => {
  return DimewiseCustomFetcher<void>({
    url: `/categories/${categoryID}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: modifyCategoryDto,
  });
};

/**
 * Delete a category based on the ID
 * @summary Delete
 */
export const deleteCategory = (categoryID: string) => {
  return DimewiseCustomFetcher<void>({
    url: `/categories/${categoryID}`,
    method: "delete",
  });
};

/**
 * Get a list of expenses
 * @summary Get List
 */
export const getExpenses = (params: GetExpensesParams) => {
  return DimewiseCustomFetcher<GetExpenses200>({
    url: `/expenses`,
    method: "get",
    params,
  });
};

export const getGetExpensesKey = (params: GetExpensesParams) =>
  [`/expenses`, ...(params ? [params] : [])] as const;

export type GetExpensesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getExpenses>>
>;
export type GetExpensesQueryError = unknown;

/**
 * @summary Get List
 */
export const useGetExpenses = <TError = unknown>(
  params: GetExpensesParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getExpenses>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetExpensesKey(params) : null));
  const swrFn = () => getExpenses(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Create an expense through form submission
 * @summary Create
 */
export const postExpense = (modifyExpenseDto: ModifyExpenseDto) => {
  return DimewiseCustomFetcher<unknown>({
    url: `/expenses`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: modifyExpenseDto,
  });
};

/**
 * Get expense details based on ID
 * @summary Get
 */
export const getExpense = (expenseID: string) => {
  return DimewiseCustomFetcher<FullExpenseDto>({
    url: `/expenses/${expenseID}`,
    method: "get",
  });
};

export const getGetExpenseKey = (expenseID: string) =>
  [`/expenses/${expenseID}`] as const;

export type GetExpenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getExpense>>
>;
export type GetExpenseQueryError = void;

/**
 * @summary Get
 */
export const useGetExpense = <TError = void>(
  expenseID: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getExpense>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  }
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!expenseID;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetExpenseKey(expenseID) : null));
  const swrFn = () => getExpense(expenseID);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * Update expense through form subsmission
 * @summary Update
 */
export const patchExpense = (
  expenseID: string,
  modifyCategoryDto: ModifyCategoryDto
) => {
  return DimewiseCustomFetcher<unknown>({
    url: `/expenses/${expenseID}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: modifyCategoryDto,
  });
};

/**
 * Delete expense based on ID
 */
export const deleteExpense = (expenseID: string) => {
  return DimewiseCustomFetcher<void>({
    url: `/expenses/${expenseID}`,
    method: "delete",
  });
};

/**
 * Get current year expense overview
 * @summary Get
 */
export const getExpensesOverview = () => {
  return DimewiseCustomFetcher<GetExpensesOverview200>({
    url: `/expenses/overview`,
    method: "get",
  });
};

export const getGetExpensesOverviewKey = () => [`/expenses/overview`] as const;

export type GetExpensesOverviewQueryResult = NonNullable<
  Awaited<ReturnType<typeof getExpensesOverview>>
>;
export type GetExpensesOverviewQueryError = unknown;

/**
 * @summary Get
 */
export const useGetExpensesOverview = <TError = unknown>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof getExpensesOverview>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetExpensesOverviewKey() : null));
  const swrFn = () => getExpensesOverview();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};
